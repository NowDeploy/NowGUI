<File version="3.1">
  <FileID>740d0865-c346-49f8-a558-8a814dddc9bc</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAGIRSURBVHhe7b13cBxLnuf3FJLiFKGI243QH6vb
i1BoN3S6k9nbuLg7uVid9iJOc7rb250dt/Nm3puded7P84/ek4/eO5AACYAEQQsQAOG999577y0d
APqv8pvdRTb7NcimAUiwv5/gl11dnZVVja7K3zezsjJfE0IIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEmC82/OEf/kHSJ598mrRj176krVt3JW2RJEmSJGlRaev2XUm7du1J+vf/779LMrGd
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
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQwg9ee+3/BzE5
gWubRfuYAAAAAElFTkSuQmCC</Preview>
  <Form>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
6fHTD+TgvzHRr2+nn/8JHEjOZXe8AAA=</Form>
  <Code><![CDATA[
Function Load-Catalog {
	Param (
		[string]$catalogFile
	)
	
	$btnAppBuild.Enabled = $false
	
	try {
		[xml]$catalog = Get-Content $catalogFile
	} Catch {
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Unable to load catalog XML.`r`n`r`n$($_.Exception.Message)", "Error", "OK", "Error")
	}
	
	$dvCatalog.Rows.Clear()
	$dvActions.Rows.Clear()
	
	Try {
		ForEach ($app in $catalog.NowDeploy.Applications.Application) {
			$newRow = @($($app.'#text'), $app.Path, $app.Exclude, $app.Supersede)
			$dvCatalog.Rows.Add($newRow)
		}
		
		ForEach ($action in $catalog.NowDeploy.Actions.ChildNodes) {
			$newRow = @($action.Name, $action.Script.File, $action.Script.ArgumentName)
			$dvActions.Rows.Add($newRow)
		}
		
		If ($catalog.NowDeploy.Actions.ChildNodes.Name -notcontains "OnComplete") {
			$dvActions.Rows.Add("OnComplete", $null, $null)
		}
		
		$btnAppBuild.Enabled = $true
		$btnDownloadCatalog.Enabled = $true
		$btnSaveCatalogXML.Enabled = $false
		
	} Catch {
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Unable to load catalog XML.`r`n`r`n$($_.Exception.Message)", "Error","OK", "Error")
	}
	
	$dvCatalog.Sort($dvCatalog.columns[0], 'Ascending')
	
}

$MainForm_Load={
	
	# Gather NowDeploy AppBuild Settings from Registry
	
	$ndUserKeys = Get-ItemProperty "HKCU:\Software\NowDeploy\AppBuilder" -ErrorAction SilentlyContinue
	$ndCompKeys = Get-ItemProperty "HKLM:\Software\NowDeploy\AppBuilder" -ErrorAction SilentlyContinue
	$cmUIKeys = Get-ItemProperty "HKCU:\Software\Microsoft\ConfigMgr10\AdminUI\MRU\1"
	
	# License Key
	
	if ($ndUserKeys.key -and $ndUserKeys.key.Length -ge 5) {
		$txtLicenseKey.Text = $ndUserKeys.key
		$rdoSaveHKCU.Select()
	} elseif ($ndCompKeys.key -and $ndCompKeys.key.Length -ge 5) {
		$txtLicenseKey.Text = $ndCompKeys.key
		$rdoSaveHKLM.Select()
	}
	
	# Package Source
	
	if ($ndUserKeys.packageSource) {
		$txtPackageSource.Text = $ndUserKeys.PackageSource
	} elseif ($ndCompKeys.packageSource) {
		$txtPackageSource.Text = $ndCompKeys.PackageSource
		
	}
	
	# SCCM Server
	
	If ($ndUserKeys.server) {
		$txtServer.Text = $ndUserKeys.Server
	} elseif ($ndCompKeys.server) {
		$txtServer.Text = $ndCompKeys.Server
	} elseif ($cmUIKeys.ServerName) {
		$txtServer.Text =  $cmUIKeys.ServerName
	}
	
	# Site Code
	
	if ($ndUserKeys.SiteCode) {
		$txtSiteCode.Text = $ndUserKeys.SiteCode
	} elseif ($ndCompKeys.Sitecode) {
		$txtSiteCode.Text = $ndCompKeys.Sitecode
	} elseif ($cmUIKeys.SiteCode) {
		$txtSiteCode.Text = $cmUIKeys.SiteCode
	}
	
	# Log File
	
	if ($ndUserKeys.logFileName) {
		$txtLogFile.Text = $ndUserKeys.LogFileName
	} elseif ($ndCompKeys.logFileName) {
		$txtLogFile.Text = $ndCompKeys.LogFilename
	}
	
	# Last Catalog
	
	if ($ndUserKeys.LastCatalog) {
		$txtCatalogFile.Text = $ndUserKeys.LastCatalog
	} elseif ($ndCompKeys.LastCatalog) {
		$txtCatalogFile.Text = $ndCompKeys.LastCatalog
	}
	
	
	$currentPrincipal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
	$administrator = $currentPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
	
	if (-not ($administrator)) {
		$rdoSaveHKLM.Enabled = $false
		$rdoSaveHKCU.Select()
	}
	
	If ($txtCatalogFile.text -and $(Get-ChildItem $txtCatalogFile.Text -ErrorAction SilentlyContinue)) {
			Load-Catalog $txtCatalogFile.Text
	}
	
	$btnSave.Enabled = $false
	
}

$buttonCallChildForm_Click={
	#TODO: Place custom script here
	if((Show-ChildForm_psf) -eq 'OK')
	{
		
	}
}

$txtLicenseKey_MouseHover={
	# Unhide the License Key
	$txtLicenseKey.PasswordChar = $null
}

$txtLicenseKey_MouseLeave={
	# Hide the License Key
	$txtLicenseKey.PasswordChar = "*"
}


$btnChangePackageSource_Click={
	# Select New Package Source
	$newFolder = $folderBrowser.ShowDialog()
	
	if ($newFolder -eq [System.Windows.Forms.DialogResult]::OK) {
		$txtPackageSource.Text = $folderBrowser.SelectedPath
	}
}

$btnSave_Click={
	# Save Settings to Registry
	
	If ($rdoSaveHKCU.Checked) {
		$rootKey = "HKCU:\Software\NowDeploy\AppBuilder"
	} else {
		$rootKey = "HKLM:\Software\NowDeploy\AppBuilder"
	}
	
	Try {
		New-ItemProperty -Path $rootKey -Name "PackageSource" -Value $txtPackageSource.text -Force
		New-ItemProperty -Path $rootKey -Name "Key" -Value $txtLicenseKey.Text -Force
		New-ItemProperty -Path $rootKey -Name "Server" -Value $txtServer.Text -Force
		New-ItemProperty -Path $rootKey -Name "SiteCode" -Value $txtSiteCode.Text -Force
		New-ItemProperty -Path $rootKey -Name "LogFileName" -Value $txtLogFile.Text -Force
		New-ItemProperty -Path $rootKey -Name "LastCatalog" -Value $txtCatalogFile.Text -Force
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Settings Saved to Registry", "Success","OK","Information")
		$btnSave.Enabled = $false
	} Catch {
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Failed to write one or more registry values.`r`n`r`n$($_.Exception.Message)", "Error", "OK", "Error")
	}
	
}

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	$ListBox.DisplayMember = $DisplayMember
	$ListBox.ValueMember = $ValueMember
}

function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterWMIProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}
#endregion

$btnLoadCatalog_Click={
	If (Get-ChildItem $txtCatalogFile.Text -ErrorAction SilentlyContinue) {
		Load-Catalog $txtCatalogFile.Text
	} else {
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Please specify a valid path to the catalog file.", "Error", "OK", "Error")
	}
}

$dvCatalog_CellEndEdit=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	
	$btnDownloadCatalog.Enabled = $false
	$btnAppBuild.Enabled = $false
	$btnSaveCatalogXML.Enabled = $true
}

$btnSaveCatalogXML_Click= {
	
	# Load catalog into variable
	
	If (Get-ChildItem $txtCatalogFile.Text -ErrorAction SilentlyContinue) {
		Try {
			[xml]$catalog = Get-Content $txtCatalogFile.Text
		} Catch {
			#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
			[void][System.Windows.Forms.MessageBox]::Show("Unable to parse catalog file.`r`n$($_.Exception.Message)", "Error", "OK", "Error")
			Return
		}
	} else {
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Please specify a valid path to the catalog file.", "Error", "OK", "Error")
		Return
	}
	
	foreach ($row in $dvCatalog.Rows) {
		$appName = $row.cells[0].Value.ToString()
		$appPath = $row.cells[1].Value.ToString()
		$appExclude = $row.cells[2].Value.ToString()
		$appSupersede = $row.cells[3].Value.ToString()
		
		($catalog.NowDeploy.Applications.Application | Where-Object { $_.'#text' -eq $appName }).Path = $appPath
		($catalog.NowDeploy.Applications.Application | Where-Object { $_.'#text' -eq $appName }).Exclude = $appExclude
		($catalog.NowDeploy.Applications.Application | Where-Object { $_.'#text' -eq $appName }).Supersede = $appSupersede
	}
	
	ForEach ($row in $dvActions.Rows) {
		$actionName = $row.cells[0].Value.ToString()
		$actionScript = $row.cells[1].Value.ToString()
		$actionParam = $row.cells[2].Value.ToString()
		
		$catalog.NowDeploy.Actions[$actionName].script.file = $actionScript
		$catalog.NowDeploy.Actions[$actionName].script.argumentName = $actionParam
	}
	
	
	Try {
		$catalog.Save($txtCatalogFile.Text)
	} Catch {
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Unable to save catalog file.", "Error", "OK", "Error")
	}
	
	$dvCatalog.Rows.Clear()
	$dvActions.Rows.Clear()
	
	Load-Catalog $txtCatalogFile.Text
	
	$btnDownloadCatalog.Enabled = $true
	$btnAppBuild.Enabled = $true
	$btnSaveCatalogXML.Enabled = $false
	
}

$txtLicenseKey_TextChanged={
	$btnSave.Enabled = $true
}

$txtServer_TextChanged={
	$btnSave.Enabled = $true
}

$txtSiteCode_TextChanged={
	$btnSave.Enabled = $true
}

$txtPackageSource_TextChanged={
	$btnSave.Enabled = $true
}

$txtLogFile_TextChanged={
	$btnSave.Enabled = $true
}

$txtCatalogFile_TextChanged={
	$btnSave.Enabled = $true
	$dvActions.Rows.Clear()
	$dvCatalog.Rows.Clear()
}


$btnChangeLogFile_Click={
	$newFile = $fileSave.ShowDialog()
	If ($newFile -eq [System.Windows.Forms.DialogResult]::OK) {
		$txtLogFile.Text = $fileSave.FileName
	}
}

$btnChangeCatalogFile_Click={
	$newFile = $fileSave.ShowDialog()
	If ($newFile -eq [System.Windows.Forms.DialogResult]::OK) {
		$txtCatalogFile.Text = $fileSave.FileName
	}
}


$dvCatalog_CellValueChanged=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	$btnDownloadCatalog.Enabled = $false
	$btnAppBuild.Enabled = $false
	$btnSaveCatalogXML.Enabled = $true
	
}

$dvActions_CellValueChanged=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	$btnDownloadCatalog.Enabled = $false
	$btnAppBuild.Enabled = $false
	$btnSaveCatalogXML.Enabled = $true
	
}

$btnDownloadCatalog_Click={
	
	$catalogMgr = Join-Path $global:ScriptDirectory -ChildPath "CatalogMgr.exe"
	
	If (-not (Get-ChildItem $catalogMgr -ErrorAction SilentlyContinue)) {
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Cannot find $catalogMgr.  Please ensure the file is placed into the same directory as this script.", "Error", "OK", "Error") 
		Return
	}
	
	$cmdArgs = "-key $($txtLicenseKey.Text) -Catalog `"$($txtCatalogFile.Text)`""
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	$continue = [System.Windows.Forms.MessageBox]::Show("Execute the following command?`r`n`r`nCatalogMgr.exe $cmdArgs", "Permission to Execute","YesNo","Question")
	
	If ($continue -eq [System.Windows.Forms.DialogResult]::Yes) {
		Start-Process -FilePath $catalogMgr -ArgumentList $cmdArgs -Wait
		Load-Catalog $txtCatalogFile.Text
	}
}

$btnAppBuild_Click={
	
	$appBuild = Join-Path $global:ScriptDirectory -ChildPath "AppBuild.exe"
	
	If (-not (Get-ChildItem $appBuild -ErrorAction SilentlyContinue)) {
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show("Cannot find $appBuild.  Please ensure the file is placed into the same directory as this script.", "Error", "OK", "Error")
		Return
	}
	
	$cmdArgs = "-key $($txtLicenseKey.Text) -catalog `"$($txtCatalogFile.Text)`" -Server `"$($txtServer.Text)`" -SiteCode `"$($txtSiteCode.Text)`" -PackageSource `"$($txtPackageSource.Text)`" -LogFileName `"$($txtLogFile.Text)`""
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	$continue = [System.Windows.Forms.MessageBox]::Show("Execute the following command?`r`n`r`nCatalogMgr.exe $cmdArgs", "Permission to Execute", "YesNo", "Question")
	
	If ($continue -eq [System.Windows.Forms.DialogResult]::Yes) {
		Start-Process -FilePath $appBuild -ArgumentList $cmdArgs
	}
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>